package member;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Scanner;

public class Main {
	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		// DAO 클래스 안에 있는 메소드를 사용하기 위해 작성
		MemberDAO dao = new Member(System.in)
		
		Scanner sc = new Scanner(System.in);
		// CRUD -> 어떠한 프로그램이든 기본적으로 존재해야하는 기능들
		
		while(true) {
			System.out.print("1.회원가입 2.로그인 3.회원목록 4.회원정보수정 5.회원탈퇴 6.종료 >> ");
			
			int menu = sc.nextInt();
			
			if(menu == 1) {
				System.out.println("=====회원가입=====");
				
				
				System.out.println("아이디 입력 : ");
				String id = sc.next();
				System.out.println("비밀번호 입력 : ");
				String pw = sc.next();
				System.out.println("닉네임 입력 :");
				String nick = sc.next();
				
				int cnt = dao.join(id, pw, nick);
				// JDBC 순서
				// 예외사항 발생
				// 이유 : 오타가 있거나 파일이 존재하지 않을 때 클래스를 못찾는 예외사항이 발생한다
				// 예외사항 해결방법 - try - catch
				// try에 예외사항이 발생할 만한 코드를 작성
				// catch 해당 예외사항이 발생하면 오류를 감지 및 포착
				
				int cnt = 0;
				Connection conn = null;
				PreparedStatement psmt = null;
				
				// 0. 드라이버 파일을 프로젝트 안에 넣어주기
				try {
					// 1. 드라이버 설치(동적로딩)
					// 왜 동적로딩인가
					// - 컴파일러는 아래의 코드를 만나기 전까지 어떠한 DBMS에
					// 드라이버를 사용하는지 모르고 아래의 코드를 만나는 순간
					// 해당 드라이버를 찾아서 설치를 한다
					Class.forName("oracle.jdbc.driver.OracleDriver");
				
				// 2. 커넥션 열기
				// - DB가 존재하는 url, 아이디, 비밀번호
				String db_url = "jdbc:oracle:thin:@localhost:1521:xe";
				String db_id = "shopping";
				String db_pw = "12345";
				
				conn = DriverManager.getConnection(db_url, db_id, db_pw);
				
				
				if(conn != null) {
					System.out.println("DB연결 성공!");
				}else {
					System.out.println("DB연결 실패...");
				}
				// 3. SQL문 실행
				// SQL문을 싱행하기 위해서는 조건이 있다
				// 1. sql문장이 이상없는지 검토를 받아야 한다
				String sql = "INSERT INTO MEMBER VALUES(?,?,?)";
				psmt = conn.prepareStatement(sql);
				
				// psmt객체가 sql문을 완성하고 실행할 수 있는 객체이다
				psmt.setString(1, id);
				psmt.setString(2, pw);
				psmt.setString(3, nick);
				// executeUpdate(); sql 문장을 실행하는 메소드
				// 실행한 문장의 개수를 int 형태로 반환
				cnt = psmt.executeUpdate();
				
				// 4. 종료(연결 끊기)
				

				} catch (ClassNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} finally {
					// try가 잘 실행되거나
					// 또는 중간에 catch로 넘어간다고 하더라도
					// finally에는 마지막에 반드시 넘어오게 되어있다
					// 4.연결끊기
					// - 연결을 끊을 때는 역순으로 끊어준다
					try {
						if(psmt != null) {
							psmt.close();	
						}
						if (conn != null) {
							conn.close();
						}
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}	
				
			}else if(menu == 2) {
				
				// 로그인
				// 사용자한테 아이디랑 비밀번호 입력받아서
				// 테이블에 해당 데이터가 있는지 확인후
				// 있으면 닉네임 가져와서
				// "(닉네임)님 로그인 성공하셨습니다"
				
				System.out.println("아이디 입력 >> ");
				String id= sc.next();
				System.out.println("비밀번호 입력 >>");
				String pw = sc.next();

				Connection conn = null;
				PreparedStatement psmt = null;
				ResultSet rs = null;
				// 1. 데이터베이스 동적로딩
				try {
					Class.forName("oracle.jdbc.driver.OracleDriver");
					
					// - DB가 존재하는 url, 아이디, 비밀번호
					String db_url = "jdbc:oracle:thin:@localhost:1521:xe";
		            String db_id = "shopping";
		            String db_pw = "12345";
		            
		            // 권한 가져오기
		            conn = DriverManager.getConnection(db_url, db_id, db_pw);
		            
		            // slq문 작성 select
		            String sql = "SELECT * FROM MEMBER WHERE ID = ? AND PW = ?";
		            psmt = conn.prepareStatement(sql);
		            psmt.setString(1, id);
		            psmt.setString(2, pw);
		            
		            // ResultSet : sql select문을 실행시 돌아오는 테이블 형태를
		            // 담을 수 있는 객체
		            
		            rs = psmt.executeQuery();
		            // rs.next() : 커서를 한 칸씩 이동 시키면서 데이터가 있는지 없는지에 대한
		            // 결과값을 t/f로 받아오는 메서드
		            // ResultSet에서 커서를 한칸 내림과 동시에 아래에 값이 있다면 true를 반환
		            // 값이 없다면 false를 반환한다
		            
		            if(rs.next()) {
		            	String login_id = rs.getString("ID");
		            	String login_pw = rs.getString("PW");
		            	String login_nick = rs.getString("NICK");
		            	System.out.println(login_nick+ "님 로그인 성공하셨습니다");
		            }
		            
				} catch (ClassNotFoundException | SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}finally {
					// 역순으로 자원을 반납
					// ResultSet
					try {
						if(rs != null) {
							rs.close();
						}
						
						
					
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
						
					}
					// PreparedStatement
				}

				
			}else if(menu == 3) {
				
				// 전체 회원의 정보가 보여지게 만들자
				// 아이디   비밀번호    닉네임
				// --------------------
				//  a       a       a
				
				System.out.println("아이디\t비밀번호\t닉네임");
				System.out.println("---------------------");
			
				

				Connection conn = null;
				PreparedStatement psmt = null;
				ResultSet rs = null;
				// 1. 데이터베이스 동적로딩
				try {
					Class.forName("oracle.jdbc.driver.OracleDriver");
					
					// - DB가 존재하는 url, 아이디, 비밀번호
					String db_url = "jdbc:oracle:thin:@localhost:1521:xe";
		            String db_id = "shopping";
		            String db_pw = "12345";
		            
		            // 권한 가져오기
		            conn = DriverManager.getConnection(db_url, db_id, db_pw);
		            
		            //select
		            String sql = "select * from member";
		            psmt = conn.prepareStatement(sql);
		            
		            // ResultSet : sql select문을 실행시 돌아오는 테이블 형태를
		            // 담을 수 있는 객체
		            
		            rs = psmt.executeQuery();
		            // rs.next() : 커서를 한 칸씩 이동 시키면서 데이터가 있는지 없는지에 대한
		            // 결과값을 t/f로 받아오는 메서드
		            while(rs.next()) {
		            	String id = rs.getString(1);
		            	String pw = rs.getString(2);
		            	String nick = rs.getString(3);
		            	System.out.println(id +"\t"+pw+"\t"+nick);
		            }
		            
				} catch (ClassNotFoundException | SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}finally {
					// 역순으로 자원을 반납
					// ResultSet
					try {
						if(rs != null)
						rs.close();
						if(psmt != null)
							psmt.close();
						if(conn != null)
							conn.close();
					} catch (SQLException e) {
						e.printStackTrace();
					}
					// PreparedStatement
				}

				
				
				
			}else if(menu == 4) {
				// 회원정보 수정
	            // 사용자로부터 아이디를 입력받아서 비밀번호를 바꾸자!
	            // Query
	            // Update 테이블명 set 컬럼명 조건문
	            // 조건문 : 사용자가 입력한 아이디에 해당하는 비밀번호를 변경
	            System.out.print("비밀번호를 바꾸고 싶은 아이디 입력 >> ");
	            String id = sc.next();
	            System.out.println("변경할 비밀번호 입력 >> ");
	            String pw = sc.next();
	            
	            Connection conn = null;
	            PreparedStatement psmt = null;
	            
	            
	            
	            // 1. 데이터베이스 연결
	            try {
	               // 동적 로딩
	               Class.forName("oracle.jdbc.driver.OracleDriver");
	               // 준비물 3개
	               String db_url = "jdbc:oracle:thin:@localhost:1521:xe";
	               String db_id = "shopping";
	               String db_pw = "12345";
	               // 연결권한 확인
	               conn = DriverManager.getConnection(db_url,db_id,db_pw);
	               
	               // SQL문을 준비
	               String sql = "update member set pw = ? where id = ?";
	               psmt = conn.prepareStatement(sql);
	               // ? 인자를 채워주자
	               psmt.setString(1, pw);
	               psmt.setString(2, id);
	               int row = psmt.executeUpdate();
	               // 영향을 받은 행이 있는지 없는지에 대한 결과값을 받아온다.
	               if(row > 0) {
	                  // update가 성공
	                  System.out.println("비밀번호 변경 성공");
	               }else {
	                  // update가 실패
	                  System.out.println("비밀번호 변경 실패");
	               }
	               
	               
	            } catch (ClassNotFoundException | SQLException e) {
	               // OracleDriver라는 클래스가 없거나 ---> ojdbc.jar
	               // 대소문자
	               // id, pw
	               System.out.println("데이터 베이스 연결 실패");
	               e.printStackTrace();
	            }finally {
	               // finally : 예외상황이 발생하더라도
	               // 꼭한번은 실행되는 코드들이 {}
	               
	               // 사용한적이 있으면 conn, psmt를 close하자
	               
	                  try {
	                     // 반드시 자원은 사용한 순서 역순으로 반납해야한다!
	                     
	                     if(psmt != null)
	                        psmt.close();
	                     
	                     if(conn != null)
	                        conn.close();
	                     
	                  } catch (SQLException e) {
	                     System.out.println("자원 반납 오류");
	                     e.printStackTrace();
	                  }
	               
	            }
	            
				
			}else if(menu == 5) {
				// 사용자한테 아이디랑 비밀번호를 입력받아서
				// 해당 아이디 비밀번호가 있으면 테이블에서 정보가 사라지게 만들자
				System.out.println("회원 탈퇴 아이디 >> ");
				String id= sc.next();
				System.out.println("회원 탈퇴 비밀번호 >>");
				String pw = sc.next();
				// 성공 -> 회원 탈퇴 완료!
				
				Connection conn = null;
				PreparedStatement psmt = null;
				
				try {
				Class.forName("oracle.jdbc.driver.OracleDriver");
				// 준비물 3개
				String db_url = "jdbc:oracle:thin:@localhost:1521:xe";
	            String db_id = "shopping";
	            String db_pw = "12345";
	            
	            conn = DriverManager.getConnection(db_url, db_id, db_pw);
	            
	            // SQL문 준비
	            String sql = "delete from member where id = ? and pw = ?";
	            psmt.setString(1,  id);
	            psmt.setString(2,  pw);
	            
	            int row = psmt.executeUpdate(); // 결과값 : 영향을 받은 행이 있는지 없는지
				
				if(row > 0) {
					System.out.println("회원 탈퇴 성공");
				}else {
					System.out.println("회원 탈퇴 실패");
				}
				} catch (ClassNotFoundException | SQLException e) {
					System.out.println("데이터베이스 연결실패");
					e.printStackTrace();
				}finally {
					//자원 반납은 역순으로
					try {
						if(psmt != null)
							psmt.close();
						if(conn != null)
							conn.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}

				
			}else if(menu == 6){
				System.out.println("프로그램을 종료합니다.");
				break;
			}else {
				System.out.println("정확한 숫자를 입력해주세요.");
			}
			
			
		}
		
		
		
		
	}
	
	
	
}



